# total pkt arrival rate = 1e7
# same controller capacity 700K
# scheduler to controller latency sample from a linear distribution from 1 to 50ms

import numpy as np


class Setting(object):

    def __init__(self, num):
        algorithm = ['RANDOM', 'WEIGHTED_RANDOM', 'GD', 'Deterministic', 'DELAY_RANDOM', 'CAPA_DELAY_RANDOM']
        self.algo = algorithm[1]
        self.history_len = 1  # the number of history data (response time & utilization) for each variable will be used
        self.respTime_update_interval = 0.5  # (sec) the time interval used in averaging the response time
        self.util_update_interval = 0.5
        self.timeStep = 1
        self.probe_overhead = 0
        self.beta = 0.1

        self.maxSimTime = 240
        self._init(num)

    # ================================================================================
    # setting 0: used in RL scheduling test
    def _init(self, num):
        if num == 0:  # small data center same controllers
            candidate = [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0]
            capacity = [10000 for _ in range(len(candidate))]
            intra_laten_range = [108, 201]  # this is the one-way latency
            inter_laten_dev = [52, 61]  # this is the variation between the one-way inter and intra latency
            self.sch2ctlLink = self.latency_generator(intra_laten_range, inter_laten_dev, candidate)  # One way Time
            self.ctlNum = sum(candidate)
            self.schNum = 32
            self.ctlRate = [(a - self.beta * self.ctlNum * self.ctlNum) * b for a, b in zip(capacity,
                                                                                            candidate)]  # controller: number of packets processed by the controller within one second
            self.ctlRate = list(filter(lambda a: a != 0, self.ctlRate))
            self.pktRate = [4062] * self.schNum  # packet arrival rate for each scheduler
        elif num == 1:  # small data center different controllers even traffic
            candidate = [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0]
            capacity = [100000] * (len(candidate) // 2)
            capacity.extend([10000] * (len(candidate) // 2))
            intra_laten_range = [108, 201]  # this is the one-way latency
            inter_laten_dev = [52, 61]  # this is the variation between the one-way inter and intra latency
            self.sch2ctlLink = self.latency_generator(intra_laten_range, inter_laten_dev, candidate)  # One way Time
            self.ctlNum = sum(candidate)
            self.schNum = 32
            self.ctlRate = [(a - self.beta * self.ctlNum * self.ctlNum) * b for a, b in zip(capacity,
                                                                                            candidate)]  # controller: number of packets processed by the controller within one second
            self.ctlRate = list(filter(lambda a: a != 0, self.ctlRate))
            self.pktRate = [28125] * self.schNum  # packet arrival rate for each scheduler
        elif num == 2:  # different controllers even traffic
            candidate = [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0]
            capacity = [100000] * (len(candidate) // 2)
            capacity.extend([10000] * (len(candidate) // 2))
            intra_laten_range = [108, 201]  # this is the one-way latency
            inter_laten_dev = [52, 61]  # this is the variation between the one-way inter and intra latency
            self.sch2ctlLink = self.latency_generator(intra_laten_range, inter_laten_dev, candidate)  # One way Time
            self.ctlNum = sum(candidate)
            self.schNum = 32
            self.ctlRate = [(a - self.beta * self.ctlNum * self.ctlNum) * b for a, b in zip(capacity,
                                                                                            candidate)]  # controller: number of packets processed by the controller within one second
            self.ctlRate = list(filter(lambda a: a != 0, self.ctlRate))
            self.pktRate = [28125] * self.schNum  # packet arrival rate for each scheduler
        elif num == 3:  # Asia Sprint Network
            candidate = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
            # self.sch2ctlLink = {
            #     0: [0.0, 0.035, 0.021, 0.075, 0.048, 0.025, 0.106, 0.074, 0.087, 0.081, 0.04, 0.069, 0.055, 0.052],
            #     1: [0.075, 0.11, 0.06, 0.0, 0.03, 0.101, 0.182, 0.151, 0.166, 0.155, 0.115, 0.145, 0.037, 0.127],
            #     2: [0.106, 0.072, 0.131, 0.182, 0.155, 0.133, 0.0, 0.044, 0.022, 0.05, 0.076, 0.04, 0.16, 0.095]}
            latency_matrix = [[0.0,0.035,0.021,0.075,0.048,0.025,0.106,0.074,0.087,0.081,0.04,0.069,0.055,0.052],
            [0.035,0.0,0.056,0.11,0.078,0.06,0.072,0.041,0.051,0.045,0.005,0.034,0.089,0.025],
            [0.021,0.056,0.0,0.06,0.03,0.047,0.131,0.096,0.115,0.102,0.061,0.09,0.036,0.074],
            [0.075,0.11,0.06,0.0,0.03,0.101,0.182,0.151,0.166,0.155,0.115,0.145,0.037,0.127],
            [0.048,0.078,0.03,0.03,0.0,0.052,0.155,0.121,0.139,0.129,0.088,0.116,0.007,0.1],
            [0.025,0.06,0.047,0.101,0.052,0.0,0.133,0.045,0.121,0.109,0.066,0.093,0.057,0.078],
            [0.106,0.072,0.131,0.182,0.155,0.133,0.0,0.044,0.022,0.05,0.076,0.04,0.16,0.095],
            [0.074,0.041,0.096,0.151,0.121,0.045,0.044,0.0,0.012,0.014,0.045,0.006,0.131,0.064],
            [0.087,0.051,0.115,0.166,0.139,0.121,0.022,0.012,0.0,0.026,0.063,0.022,0.145,0.081],
            [0.081,0.045,0.102,0.155,0.129,0.109,0.05,0.014,0.026,0.0,0.049,0.012,0.136,0.07],
            [0.04,0.005,0.061,0.115,0.088,0.066,0.076,0.045,0.063,0.049,0.0,0.04,0.096,0.031],
            [0.069,0.034,0.09,0.145,0.116,0.093,0.04,0.006,0.022,0.012,0.04,0.0,0.123,0.06],
            [0.055,0.089,0.036,0.037,0.007,0.057,0.16,0.131,0.145,0.136,0.096,0.123,0.0,0.107],
            [0.052,0.025,0.074,0.127,0.1,0.078,0.095,0.064,0.081,0.07,0.031,0.06,0.107,0.0]]
            latency = np.multiply(latency_matrix, 1.0)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            self.ctlRate = [6000, 9000, 12000]
            # self.pktRate = [1942]*self.schNum
            # self.pktRate = [1071, 1072, 1071, 1072, 1071, 1072, 1071, 1072, 1071, 1072, 1071, 1072, 1071, 1071]
            # self.pktRate = [1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215, 1215, 1215, 1215]
            # self.pktRate = [1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358]
            # self.pktRate = [1500]*self.schNum
            # self.pktRate = [1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1642, 1642]
            # self.pktRate = [1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1782]
            # self.pktRate = [1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1857, 1858, 1858]
            # self.pktRate = [1928, 1929, 1928, 1929, 1928, 1929, 1928, 1929, 1928, 1929, 1928, 1929, 1929, 1929]
            # self.pktRate = [2000]*self.schNum
            self.pktRate = [2071, 2072, 2071, 2072, 2071, 2072, 2071, 2072, 2071, 2072, 2071, 2072, 2071, 2071]
            # self.pktRate = [2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2142, 2142]
            # self.pktRate = [2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2215, 2215, 2215, 2215]
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum
            self.laten = np.zeros((self.ctlNum, self.schNum))
            for key in self.sch2ctlLink:
                self.laten[key] = self.sch2ctlLink[key]
            self.laten[0][0] = 0.1 * np.sort(self.laten[:, 0])[1]
            self.laten[1][3] = 0.1 * np.sort(self.laten[:, 3])[1]
            self.laten[2][6] = 0.1 * np.sort(self.laten[:, 6])[1]

        elif num == 4:  # Global GA+GD
            candidate = [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,
                         1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                         0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            file = open("/home/victoria/MEGA/Controller placement/topology/sprint_latency.txt", "rb")
            latency_matrix = np.load(file)
            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1
            larger_ctl = [30, 31, 32, 33, 34, 35, 36, 43, 44, 67, 68, 45, 46, 48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                          12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 60, 52, 62]
            capacity = np.array([10000] * (self.schNum))
            capacity[larger_ctl] = 100000
            self.ctlRate = [x * y for x, y in zip(candidate, capacity)]
            self.ctlRate = list(filter(lambda a: a != 0, self.ctlRate))
            self.pktRate = [28048, 28049] * (self.schNum // 2)
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 5:  # Global K-center
            capacity = np.array([6000] * 82)
            # ind = [30, 79, 36, 43, 78, 47, 48, 54, 6, 9, 13, 21, 25, 29, 50, 51, 60, 62]
            ind = [30, 79, 36, 33, 31, 43, 78, 81, 44, 47, 46, 48, 49, 54, 6, 9, 13, 21, 25, 29, 50, 51, 70, 53, 66, 75,
                   5, 60, 62, 52]
            ind = sorted(ind)
            capacity[ind] = 9000

            candidate = np.array([0]*82)
            ind =  [0, 60, 74, 49, 72, 46, 79, 65, 13, 81, 50, 30, 58, 51, 54, 67, 45, 29, 73, 42, 76, 80, 52, 64, 38, 56, 77, 27, 5, 75, 11, 14, 69, 71, 41, 43, 25, 48, 32, 70, 4, 33, 10, 28, 68, 18, 53, 66, 35, 20, 59, 55, 7, 37, 39, 47, 61, 16, 21, 31, 36]
            ind = sorted(ind)
            candidate[ind] = 1
            self.ctlRate = capacity[ind]

            # candidate = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0]
            # self.ctlRate = []
            # for i in range(len(candidate)):
            #     if candidate[i] == 1:
            #         self.ctlRate.append(capacity[i])

            file = open("/home/victoria/MEGA/Controller placement/topology/sprint_latency.txt", "rb")
            latency_matrix = np.load(file)
            sch2ctlLink = np.multiply(latency_matrix, 1e-3)

            self.sch2ctlLink = {}
            var = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[var] = np.array(sch2ctlLink[i]) * 0.5
                    var += 1

            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)

            self.pktRate = [610*7] * self.schNum
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 6:  # Europe network
            latency_matrix = [[0.0, 11.0, 16.0, 18.0, 16.0, 28.0, 22.0, 31.0, 37.0, 37.0, 34.0, 34.0, 39.0, 38.0, 59.0],
                              [11.0, 0.0, 6.0, 7.0, 5.0, 17.0, 11.0, 18.0, 27.0, 23.0, 23.0, 24.0, 28.0, 28.0, 49.0],
                              [16.0, 6.0, 0.0, 15.0, 4.0, 14.0, 6.0, 13.0, 20.0, 19.0, 20.0, 24.0, 26.0, 21.0, 45.0],
                              [18.0, 7.0, 15.0, 0.0, 13.0, 10.0, 20.0, 25.0, 35.0, 32.0, 16.0, 16.0, 21.0, 35.0, 55.0],
                              [16.0, 5.0, 4.0, 13.0, 0.0, 18.0, 10.0, 16.0, 24.0, 22.0, 24.0, 28.0, 29.0, 25.0, 45.0],
                              [28.0, 17.0, 14.0, 10.0, 18.0, 0.0, 8.0, 15.0, 22.0, 21.0, 6.0, 10.0, 11.0, 24.0, 47.0],
                              [22.0, 11.0, 6.0, 20.0, 10.0, 8.0, 0.0, 7.0, 14.0, 13.0, 14.0, 18.0, 20.0, 15.0, 35.0],
                              [31.0, 18.0, 13.0, 25.0, 16.0, 15.0, 7.0, 0.0, 7.0, 7.0, 21.0, 25.0, 26.0, 22.0, 30.0],
                              [37.0, 27.0, 20.0, 35.0, 24.0, 22.0, 14.0, 7.0, 0.0, 7.0, 28.0, 32.0, 33.0, 29.0, 41.0],
                              [37.0, 23.0, 19.0, 32.0, 22.0, 21.0, 13.0, 7.0, 7.0, 0.0, 27.0, 31.0, 32.0, 28.0, 38.0],
                              [34.0, 23.0, 20.0, 16.0, 24.0, 6.0, 14.0, 21.0, 28.0, 27.0, 0.0, 4.0, 17.0, 30.0, 53.0],
                              [34.0, 24.0, 24.0, 16.0, 28.0, 10.0, 18.0, 25.0, 32.0, 31.0, 4.0, 0.0, 21.0, 33.0, 57.0],
                              [39.0, 28.0, 26.0, 21.0, 29.0, 11.0, 20.0, 26.0, 33.0, 32.0, 17.0, 21.0, 0.0, 22.0, 55.0],
                              [38.0, 28.0, 21.0, 35.0, 25.0, 24.0, 15.0, 22.0, 29.0, 28.0, 30.0, 33.0, 22.0, 0.0, 51.0],
                              [59.0, 49.0, 45.0, 55.0, 45.0, 47.0, 35.0, 30.0, 41.0, 38.0, 53.0, 57.0, 55.0, 51.0, 0.0]]
            capacity = np.array([6000] * 15)
            # ind = [0, 1, 4, 7]
            ind = [0, 6, 14]
            capacity[ind] = 9000

            # candidate = np.array([0]*82)
            # ind = [0, 60, 74, 49, 72, 46, 79, 65, 13, 81, 50, 30, 58, 51, 54, 67, 45, 29, 73, 42, 76, 80, 52, 64, 38, 56, 77, 27, 5, 75, 11, 14, 69, 71, 41, 43, 25, 48, 32, 70, 4, 33, 10, 28, 68, 18, 53, 66, 35, 20, 59, 55, 7, 37, 39, 47, 61, 16, 21, 31, 36, 78, 62, 57, 44, 34, 15, 40, 24, 26, 1, 3, 17, 2, 8, 12]
            # ind = sorted(ind)
            # candidate[ind] = 1
            # self.ctlRate = capacity[ind]

            candidate = [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            self.pktRate = [610*7] * self.schNum
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 7:  # North American network
            latency_matrix = [
                [0.0, 5.0, 52.0, 18.0, 15.0, 26.0, 40.0, 50.0, 47.0, 47.0, 30.0, 50.0, 16.0, 89.0, 49.0, 20.0, 15.0,
                 21.0, 14.0, 17.0, 9.0, 8.0, 16.0, 50.0, 5.0, 19.0, 12.0, 27.0, 15.0, 44.0, 63.0, 51.0, 42.0, 50.0,
                 18.0, 31.0, 20.0, 55.0, 18.0, 19.0, 20.0, 52.0, 38.0, 26.0, 43.0],
                [5.0, 0.0, 45.0, 11.0, 10.0, 31.0, 51.0, 43.0, 41.0, 42.0, 17.0, 45.0, 17.0, 93.0, 42.0, 16.0, 21.0,
                 20.0, 12.0, 22.0, 14.0, 3.0, 15.0, 54.0, 10.0, 27.0, 7.0, 20.0, 9.0, 49.0, 68.0, 56.0, 55.0, 54.0,
                 19.0, 26.0, 17.0, 49.0, 23.0, 14.0, 18.0, 47.0, 42.0, 21.0, 38.0],
                [52.0, 45.0, 0.0, 34.0, 41.0, 46.0, 10.0, 2.0, 4.0, 16.0, 58.0, 20.0, 55.0, 54.0, 17.0, 58.0, 67.0,
                 61.0, 37.0, 41.0, 60.0, 42.0, 67.0, 8.0, 57.0, 73.0, 48.0, 25.0, 49.0, 87.0, 106.0, 94.0, 9.0, 65.0,
                 68.0, 67.0, 58.0, 5.0, 43.0, 53.0, 59.0, 22.0, 53.0, 60.0, 33.0],
                [18.0, 11.0, 34.0, 0.0, 8.0, 22.0, 39.0, 32.0, 30.0, 37.0, 24.0, 38.0, 24.0, 84.0, 31.0, 23.0, 33.0,
                 27.0, 3.0, 13.0, 26.0, 8.0, 33.0, 42.0, 22.0, 37.0, 14.0, 9.0, 15.0, 60.0, 79.0, 67.0, 41.0, 45.0,
                 35.0, 33.0, 24.0, 38.0, 14.0, 19.0, 25.0, 45.0, 33.0, 26.0, 43.0],
                [15.0, 10.0, 41.0, 8.0, 0.0, 25.0, 47.0, 39.0, 37.0, 32.0, 23.0, 33.0, 20.0, 91.0, 39.0, 22.0, 30.0,
                 26.0, 11.0, 21.0, 24.0, 7.0, 23.0, 49.0, 20.0, 39.0, 13.0, 17.0, 13.0, 59.0, 78.0, 66.0, 51.0, 53.0,
                 23.0, 32.0, 23.0, 45.0, 21.0, 18.0, 24.0, 37.0, 41.0, 25.0, 42.0],
                [26.0, 31.0, 46.0, 22.0, 25.0, 0.0, 37.0, 39.0, 51.0, 62.0, 56.0, 59.0, 41.0, 77.0, 30.0, 39.0, 29.0,
                 43.0, 14.0, 5.0, 32.0, 28.0, 40.0, 33.0, 21.0, 25.0, 37.0, 30.0, 38.0, 50.0, 69.0, 57.0, 39.0, 33.0,
                 38.0, 49.0, 44.0, 49.0, 9.0, 42.0, 45.0, 59.0, 16.0, 46.0, 63.0],
                [40.0, 51.0, 10.0, 39.0, 47.0, 37.0, 0.0, 8.0, 10.0, 23.0, 64.0, 23.0, 73.0, 49.0, 6.0, 67.0, 59.0,
                 61.0, 42.0, 23.0, 43.0, 48.0, 56.0, 1.0, 39.0, 64.0, 54.0, 31.0, 54.0, 78.0, 97.0, 85.0, 1.0, 56.0,
                 76.0, 72.0, 67.0, 13.0, 24.0, 59.0, 59.0, 28.0, 44.0, 66.0, 39.0],
                [50.0, 43.0, 2.0, 32.0, 39.0, 39.0, 8.0, 0.0, 2.0, 15.0, 56.0, 16.0, 56.0, 52.0, 18.0, 55.0, 65.0, 59.0,
                 36.0, 40.0, 59.0, 40.0, 65.0, 9.0, 55.0, 69.0, 46.0, 24.0, 47.0, 86.0, 105.0, 93.0, 12.0, 64.0, 67.0,
                 65.0, 58.0, 7.0, 32.0, 51.0, 57.0, 20.0, 52.0, 59.0, 32.0],
                [47.0, 41.0, 4.0, 30.0, 37.0, 51.0, 10.0, 2.0, 0.0, 13.0, 54.0, 16.0, 51.0, 54.0, 18.0, 53.0, 63.0,
                 57.0, 33.0, 43.0, 56.0, 38.0, 63.0, 12.0, 52.0, 67.0, 44.0, 21.0, 44.0, 88.0, 107.0, 95.0, 13.0, 66.0,
                 66.0, 63.0, 56.0, 6.0, 43.0, 49.0, 55.0, 18.0, 54.0, 56.0, 29.0],
                [47.0, 42.0, 16.0, 37.0, 32.0, 62.0, 23.0, 15.0, 13.0, 0.0, 55.0, 1.0, 52.0, 67.0, 32.0, 54.0, 63.0,
                 58.0, 43.0, 52.0, 56.0, 39.0, 53.0, 24.0, 52.0, 71.0, 45.0, 25.0, 46.0, 91.0, 110.0, 98.0, 26.0, 79.0,
                 55.0, 64.0, 55.0, 22.0, 51.0, 50.0, 56.0, 5.0, 67.0, 57.0, 16.0],
                [30.0, 17.0, 58.0, 24.0, 23.0, 56.0, 64.0, 56.0, 54.0, 55.0, 0.0, 56.0, 8.0, 107.0, 56.0, 7.0, 26.0,
                 3.0, 26.0, 40.0, 20.0, 16.0, 8.0, 66.0, 30.0, 30.0, 10.0, 33.0, 14.0, 53.0, 72.0, 60.0, 66.0, 68.0,
                 16.0, 14.0, 7.0, 63.0, 49.0, 19.0, 3.0, 60.0, 56.0, 22.0, 51.0],
                [50.0, 45.0, 20.0, 38.0, 33.0, 59.0, 23.0, 16.0, 16.0, 1.0, 56.0, 0.0, 56.0, 68.0, 29.0, 55.0, 66.0,
                 64.0, 44.0, 56.0, 62.0, 42.0, 56.0, 27.0, 55.0, 67.0, 51.0, 29.0, 49.0, 92.0, 111.0, 99.0, 28.0, 79.0,
                 55.0, 65.0, 56.0, 28.0, 57.0, 56.0, 59.0, 11.0, 67.0, 63.0, 22.0],
                [16.0, 17.0, 55.0, 24.0, 20.0, 41.0, 73.0, 56.0, 51.0, 52.0, 8.0, 56.0, 0.0, 104.0, 55.0, 2.0, 18.0,
                 5.0, 30.0, 34.0, 12.0, 13.0, 1.0, 66.0, 16.0, 22.0, 10.0, 30.0, 11.0, 47.0, 66.0, 54.0, 68.0, 65.0,
                 2.0, 6.0, 2.0, 63.0, 34.0, 21.0, 4.0, 57.0, 53.0, 23.0, 48.0],
                [89.0, 93.0, 54.0, 84.0, 91.0, 77.0, 49.0, 52.0, 54.0, 67.0, 107.0, 68.0, 104.0, 0.0, 55.0, 106.0, 98.0,
                 108.0, 81.0, 72.0, 92.0, 91.0, 103.0, 48.0, 88.0, 102.0, 97.0, 75.0, 97.0, 127.0, 146.0, 134.0, 49.0,
                 105.0, 105.0, 110.0, 106.0, 59.0, 73.0, 102.0, 107.0, 72.0, 93.0, 109.0, 83.0],
                [49.0, 42.0, 17.0, 31.0, 39.0, 30.0, 6.0, 18.0, 18.0, 32.0, 56.0, 29.0, 55.0, 55.0, 0.0, 55.0, 44.0,
                 58.0, 35.0, 18.0, 37.0, 39.0, 64.0, 9.0, 34.0, 47.0, 46.0, 22.0, 46.0, 72.0, 91.0, 79.0, 11.0, 51.0,
                 66.0, 65.0, 55.0, 22.0, 19.0, 50.0, 56.0, 37.0, 39.0, 58.0, 75.0],
                [20.0, 16.0, 58.0, 23.0, 22.0, 39.0, 67.0, 55.0, 53.0, 54.0, 7.0, 55.0, 2.0, 106.0, 55.0, 0.0, 20.0,
                 4.0, 32.0, 35.0, 14.0, 15.0, 3.0, 68.0, 18.0, 26.0, 9.0, 32.0, 13.0, 49.0, 68.0, 56.0, 59.0, 67.0, 4.0,
                 8.0, 4.0, 63.0, 36.0, 20.0, 2.0, 59.0, 55.0, 23.0, 50.0],
                [15.0, 21.0, 67.0, 33.0, 30.0, 29.0, 59.0, 65.0, 63.0, 63.0, 26.0, 66.0, 18.0, 98.0, 44.0, 20.0, 0.0,
                 23.0, 29.0, 26.0, 7.0, 23.0, 18.0, 60.0, 10.0, 6.0, 26.0, 42.0, 32.0, 31.0, 50.0, 38.0, 62.0, 59.0,
                 19.0, 24.0, 21.0, 71.0, 27.0, 34.0, 22.0, 67.0, 45.0, 42.0, 59.0],
                [21.0, 20.0, 61.0, 27.0, 26.0, 43.0, 61.0, 59.0, 57.0, 58.0, 3.0, 64.0, 5.0, 108.0, 58.0, 4.0, 23.0,
                 0.0, 34.0, 37.0, 23.0, 19.0, 12.0, 79.0, 20.0, 27.0, 13.0, 36.0, 17.0, 52.0, 71.0, 59.0, 80.0, 69.0,
                 7.0, 12.0, 4.0, 67.0, 38.0, 16.0, 6.0, 63.0, 57.0, 19.0, 54.0],
                [14.0, 12.0, 37.0, 3.0, 11.0, 14.0, 42.0, 36.0, 33.0, 43.0, 26.0, 44.0, 30.0, 81.0, 35.0, 32.0, 29.0,
                 34.0, 0.0, 9.0, 23.0, 10.0, 29.0, 43.0, 19.0, 38.0, 16.0, 12.0, 16.0, 58.0, 77.0, 65.0, 34.0, 42.0,
                 31.0, 35.0, 34.0, 42.0, 11.0, 21.0, 34.0, 45.0, 30.0, 28.0, 45.0],
                [17.0, 22.0, 41.0, 13.0, 21.0, 5.0, 23.0, 40.0, 43.0, 52.0, 40.0, 56.0, 34.0, 72.0, 18.0, 35.0, 26.0,
                 37.0, 9.0, 0.0, 20.0, 19.0, 33.0, 24.0, 16.0, 37.0, 25.0, 22.0, 26.0, 55.0, 74.0, 62.0, 27.0, 33.0,
                 33.0, 44.0, 36.0, 35.0, 1.0, 30.0, 36.0, 55.0, 21.0, 37.0, 54.0],
                [9.0, 14.0, 60.0, 26.0, 24.0, 32.0, 43.0, 59.0, 56.0, 56.0, 20.0, 62.0, 12.0, 92.0, 37.0, 14.0, 7.0,
                 23.0, 23.0, 20.0, 0.0, 17.0, 11.0, 53.0, 4.0, 10.0, 19.0, 35.0, 23.0, 35.0, 54.0, 42.0, 45.0, 53.0,
                 13.0, 18.0, 14.0, 65.0, 20.0, 28.0, 15.0, 61.0, 41.0, 35.0, 52.0],
                [8.0, 3.0, 42.0, 8.0, 7.0, 28.0, 48.0, 40.0, 38.0, 39.0, 16.0, 42.0, 13.0, 91.0, 39.0, 15.0, 23.0, 19.0,
                 10.0, 19.0, 17.0, 0.0, 17.0, 49.0, 13.0, 27.0, 6.0, 17.0, 6.0, 52.0, 71.0, 59.0, 50.0, 52.0, 18.0,
                 25.0, 16.0, 45.0, 21.0, 11.0, 17.0, 44.0, 40.0, 18.0, 35.0],
                [16.0, 15.0, 67.0, 33.0, 23.0, 40.0, 56.0, 65.0, 63.0, 53.0, 8.0, 56.0, 1.0, 103.0, 64.0, 3.0, 18.0,
                 12.0, 29.0, 33.0, 11.0, 17.0, 0.0, 66.0, 15.0, 22.0, 8.0, 42.0, 12.0, 46.0, 65.0, 53.0, 75.0, 64.0,
                 2.0, 7.0, 3.0, 73.0, 34.0, 22.0, 4.0, 60.0, 52.0, 23.0, 49.0],
                [50.0, 54.0, 8.0, 42.0, 49.0, 33.0, 1.0, 9.0, 12.0, 24.0, 66.0, 27.0, 66.0, 48.0, 9.0, 68.0, 60.0, 79.0,
                 43.0, 24.0, 53.0, 49.0, 66.0, 0.0, 40.0, 57.0, 55.0, 32.0, 56.0, 79.0, 98.0, 86.0, 1.0, 57.0, 67.0,
                 75.0, 59.0, 12.0, 34.0, 61.0, 69.0, 29.0, 45.0, 67.0, 40.0],
                [5.0, 10.0, 57.0, 22.0, 20.0, 21.0, 39.0, 55.0, 52.0, 52.0, 30.0, 55.0, 16.0, 88.0, 34.0, 18.0, 10.0,
                 20.0, 19.0, 16.0, 4.0, 13.0, 15.0, 40.0, 0.0, 14.0, 17.0, 31.0, 19.0, 39.0, 58.0, 46.0, 41.0, 49.0,
                 17.0, 36.0, 18.0, 60.0, 17.0, 24.0, 19.0, 57.0, 37.0, 31.0, 48.0],
                [19.0, 27.0, 73.0, 37.0, 39.0, 25.0, 64.0, 69.0, 67.0, 71.0, 30.0, 67.0, 22.0, 102.0, 47.0, 26.0, 6.0,
                 27.0, 38.0, 37.0, 10.0, 27.0, 22.0, 57.0, 14.0, 0.0, 31.0, 50.0, 36.0, 25.0, 44.0, 32.0, 63.0, 58.0,
                 23.0, 30.0, 26.0, 75.0, 31.0, 38.0, 26.0, 71.0, 41.0, 59.0, 67.0],
                [12.0, 7.0, 48.0, 14.0, 13.0, 37.0, 54.0, 46.0, 44.0, 45.0, 10.0, 51.0, 10.0, 97.0, 46.0, 9.0, 26.0,
                 13.0, 16.0, 25.0, 19.0, 6.0, 8.0, 55.0, 17.0, 31.0, 0.0, 23.0, 4.0, 54.0, 73.0, 61.0, 56.0, 58.0, 10.0,
                 19.0, 10.0, 53.0, 26.0, 17.0, 11.0, 50.0, 46.0, 32.0, 41.0],
                [27.0, 20.0, 25.0, 9.0, 17.0, 30.0, 31.0, 24.0, 21.0, 25.0, 33.0, 29.0, 30.0, 75.0, 22.0, 32.0, 42.0,
                 36.0, 12.0, 22.0, 35.0, 17.0, 42.0, 32.0, 31.0, 50.0, 23.0, 0.0, 23.0, 69.0, 88.0, 76.0, 33.0, 54.0,
                 43.0, 42.0, 35.0, 31.0, 22.0, 28.0, 34.0, 30.0, 42.0, 35.0, 52.0],
                [15.0, 9.0, 49.0, 15.0, 13.0, 38.0, 54.0, 47.0, 44.0, 46.0, 14.0, 49.0, 11.0, 97.0, 46.0, 13.0, 32.0,
                 17.0, 16.0, 26.0, 23.0, 6.0, 12.0, 56.0, 19.0, 36.0, 4.0, 23.0, 0.0, 58.0, 77.0, 65.0, 58.0, 58.0,
                 13.0, 23.0, 13.0, 52.0, 27.0, 18.0, 17.0, 50.0, 46.0, 25.0, 41.0],
                [44.0, 49.0, 87.0, 60.0, 59.0, 50.0, 78.0, 86.0, 88.0, 91.0, 53.0, 92.0, 47.0, 127.0, 72.0, 49.0, 31.0,
                 52.0, 58.0, 55.0, 35.0, 52.0, 46.0, 79.0, 39.0, 25.0, 54.0, 69.0, 58.0, 0.0, 69.0, 57.0, 79.0, 83.0,
                 48.0, 53.0, 49.0, 90.0, 55.0, 63.0, 50.0, 96.0, 66.0, 69.0, 87.0],
                [63.0, 68.0, 106.0, 79.0, 78.0, 69.0, 97.0, 105.0, 107.0, 110.0, 72.0, 111.0, 66.0, 146.0, 91.0, 68.0,
                 50.0, 71.0, 77.0, 74.0, 54.0, 71.0, 65.0, 98.0, 58.0, 44.0, 73.0, 88.0, 77.0, 69.0, 0.0, 76.0, 98.0,
                 102.0, 67.0, 72.0, 68.0, 109.0, 74.0, 82.0, 69.0, 115.0, 85.0, 88.0, 106.0],
                [51.0, 56.0, 94.0, 67.0, 66.0, 57.0, 85.0, 93.0, 95.0, 98.0, 60.0, 99.0, 54.0, 134.0, 79.0, 56.0, 38.0,
                 59.0, 65.0, 62.0, 42.0, 59.0, 53.0, 86.0, 46.0, 32.0, 61.0, 76.0, 65.0, 57.0, 76.0, 0.0, 86.0, 90.0,
                 55.0, 60.0, 56.0, 97.0, 62.0, 70.0, 57.0, 103.0, 73.0, 76.0, 94.0],
                [42.0, 55.0, 9.0, 41.0, 51.0, 39.0, 1.0, 12.0, 13.0, 26.0, 66.0, 28.0, 68.0, 49.0, 11.0, 59.0, 62.0,
                 80.0, 34.0, 27.0, 45.0, 50.0, 75.0, 1.0, 41.0, 63.0, 56.0, 33.0, 58.0, 79.0, 98.0, 86.0, 0.0, 57.0,
                 68.0, 77.0, 71.0, 14.0, 27.0, 61.0, 70.0, 30.0, 45.0, 69.0, 41.0],
                [50.0, 54.0, 65.0, 45.0, 53.0, 33.0, 56.0, 64.0, 66.0, 79.0, 68.0, 79.0, 65.0, 105.0, 51.0, 67.0, 59.0,
                 69.0, 42.0, 33.0, 53.0, 52.0, 64.0, 57.0, 49.0, 58.0, 58.0, 54.0, 58.0, 83.0, 102.0, 90.0, 57.0, 0.0,
                 66.0, 71.0, 67.0, 68.0, 34.0, 63.0, 68.0, 84.0, 17.0, 70.0, 87.0],
                [18.0, 19.0, 68.0, 35.0, 23.0, 38.0, 76.0, 67.0, 66.0, 55.0, 16.0, 55.0, 2.0, 105.0, 66.0, 4.0, 19.0,
                 7.0, 31.0, 33.0, 13.0, 18.0, 2.0, 67.0, 17.0, 23.0, 10.0, 43.0, 13.0, 48.0, 67.0, 55.0, 68.0, 66.0,
                 0.0, 8.0, 5.0, 71.0, 35.0, 23.0, 6.0, 59.0, 54.0, 33.0, 51.0],
                [31.0, 26.0, 67.0, 33.0, 32.0, 49.0, 72.0, 65.0, 63.0, 64.0, 14.0, 65.0, 6.0, 110.0, 65.0, 8.0, 24.0,
                 12.0, 35.0, 44.0, 18.0, 25.0, 7.0, 75.0, 36.0, 30.0, 19.0, 42.0, 23.0, 53.0, 72.0, 60.0, 77.0, 71.0,
                 8.0, 0.0, 8.0, 70.0, 45.0, 36.0, 10.0, 69.0, 59.0, 30.0, 60.0],
                [20.0, 17.0, 58.0, 24.0, 23.0, 44.0, 67.0, 58.0, 56.0, 55.0, 7.0, 56.0, 2.0, 106.0, 55.0, 4.0, 21.0,
                 4.0, 34.0, 36.0, 14.0, 16.0, 3.0, 59.0, 18.0, 26.0, 10.0, 35.0, 13.0, 49.0, 68.0, 56.0, 71.0, 67.0,
                 5.0, 8.0, 0.0, 62.0, 35.0, 20.0, 2.0, 59.0, 55.0, 23.0, 53.0],
                [55.0, 49.0, 5.0, 38.0, 45.0, 49.0, 13.0, 7.0, 6.0, 22.0, 63.0, 28.0, 63.0, 59.0, 22.0, 63.0, 71.0,
                 67.0, 42.0, 35.0, 65.0, 45.0, 73.0, 12.0, 60.0, 75.0, 53.0, 31.0, 52.0, 90.0, 109.0, 97.0, 14.0, 68.0,
                 71.0, 70.0, 62.0, 0.0, 38.0, 58.0, 62.0, 27.0, 56.0, 65.0, 38.0],
                [18.0, 23.0, 43.0, 14.0, 21.0, 9.0, 24.0, 32.0, 43.0, 51.0, 49.0, 57.0, 34.0, 73.0, 19.0, 36.0, 27.0,
                 38.0, 11.0, 1.0, 20.0, 21.0, 34.0, 34.0, 17.0, 31.0, 26.0, 22.0, 27.0, 55.0, 74.0, 62.0, 27.0, 34.0,
                 35.0, 45.0, 35.0, 38.0, 0.0, 31.0, 37.0, 53.0, 22.0, 38.0, 56.0],
                [19.0, 14.0, 53.0, 19.0, 18.0, 42.0, 59.0, 51.0, 49.0, 50.0, 19.0, 56.0, 21.0, 102.0, 50.0, 20.0, 34.0,
                 16.0, 21.0, 30.0, 28.0, 11.0, 22.0, 61.0, 24.0, 38.0, 17.0, 28.0, 18.0, 63.0, 82.0, 70.0, 61.0, 63.0,
                 23.0, 36.0, 20.0, 58.0, 31.0, 0.0, 17.0, 55.0, 51.0, 7.0, 46.0],
                [20.0, 18.0, 59.0, 25.0, 24.0, 45.0, 59.0, 57.0, 55.0, 56.0, 3.0, 59.0, 4.0, 107.0, 56.0, 2.0, 22.0,
                 6.0, 34.0, 36.0, 15.0, 17.0, 4.0, 69.0, 19.0, 26.0, 11.0, 34.0, 17.0, 50.0, 69.0, 57.0, 70.0, 68.0,
                 6.0, 10.0, 2.0, 62.0, 37.0, 17.0, 0.0, 61.0, 56.0, 19.0, 52.0],
                [52.0, 47.0, 22.0, 45.0, 37.0, 59.0, 28.0, 20.0, 18.0, 5.0, 60.0, 11.0, 57.0, 72.0, 37.0, 59.0, 67.0,
                 63.0, 45.0, 55.0, 61.0, 44.0, 60.0, 29.0, 57.0, 71.0, 50.0, 30.0, 50.0, 96.0, 115.0, 103.0, 30.0, 84.0,
                 59.0, 69.0, 59.0, 27.0, 53.0, 55.0, 61.0, 0.0, 72.0, 62.0, 12.0],
                [38.0, 42.0, 53.0, 33.0, 41.0, 16.0, 44.0, 52.0, 54.0, 67.0, 56.0, 67.0, 53.0, 93.0, 39.0, 55.0, 45.0,
                 57.0, 30.0, 21.0, 41.0, 40.0, 52.0, 45.0, 37.0, 41.0, 46.0, 42.0, 46.0, 66.0, 85.0, 73.0, 45.0, 17.0,
                 54.0, 59.0, 55.0, 56.0, 22.0, 51.0, 56.0, 72.0, 0.0, 58.0, 75.0],
                [26.0, 21.0, 60.0, 26.0, 25.0, 46.0, 66.0, 59.0, 56.0, 57.0, 22.0, 63.0, 23.0, 109.0, 58.0, 23.0, 42.0,
                 19.0, 28.0, 37.0, 35.0, 18.0, 23.0, 67.0, 31.0, 59.0, 32.0, 35.0, 25.0, 69.0, 88.0, 76.0, 69.0, 70.0,
                 33.0, 30.0, 23.0, 65.0, 38.0, 7.0, 19.0, 62.0, 58.0, 0.0, 53.0],
                [43.0, 38.0, 33.0, 43.0, 42.0, 63.0, 39.0, 32.0, 29.0, 16.0, 51.0, 22.0, 48.0, 83.0, 75.0, 50.0, 59.0,
                 54.0, 45.0, 54.0, 52.0, 35.0, 49.0, 40.0, 48.0, 67.0, 41.0, 52.0, 41.0, 87.0, 106.0, 94.0, 41.0, 87.0,
                 51.0, 60.0, 53.0, 38.0, 56.0, 46.0, 52.0, 12.0, 75.0, 53.0, 0.0]]
            capacity = np.array([6000] * 45)
            # ind = [0, 1, 4, 7]
            # capacity[ind] = 9000

            # candidate = np.array([0]*82)
            # ind = [0, 60, 74, 49, 72, 46, 79, 65, 13, 81, 50, 30, 58, 51, 54, 67, 45, 29, 73, 42, 76, 80, 52, 64, 38, 56, 77, 27, 5, 75, 11, 14, 69, 71, 41, 43, 25, 48, 32, 70, 4, 33, 10, 28, 68, 18, 53, 66, 35, 20, 59, 55, 7, 37, 39, 47, 61, 16, 21, 31, 36, 78, 62, 57, 44, 34, 15, 40, 24, 26, 1, 3, 17, 2, 8, 12]
            # ind = sorted(ind)
            # candidate[ind] = 1
            # self.ctlRate = capacity[ind]

            candidate = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])


            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            self.pktRate = [610*7] * self.schNum
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 8:  # India network
            latency_matrix = [[0.0, 35.0, 106.0, 74.0, 87.0, 81.0, 40.0, 69.0, 52.0],
                              [35.0, 0.0, 72.0, 41.0, 51.0, 45.0, 5.0, 34.0, 25.0],
                              [106.0, 72.0, 0.0, 44.0, 22.0, 50.0, 76.0, 40.0, 95.0],
                              [74.0, 41.0, 44.0, 0.0, 12.0, 14.0, 45.0, 6.0, 64.0],
                              [87.0, 51.0, 22.0, 12.0, 0.0, 26.0, 63.0, 22.0, 81.0],
                              [81.0, 45.0, 50.0, 14.0, 26.0, 0.0, 49.0, 12.0, 70.0],
                              [40.0, 5.0, 76.0, 45.0, 63.0, 49.0, 0.0, 40.0, 31.0],
                              [69.0, 34.0, 40.0, 6.0, 22.0, 12.0, 40.0, 0.0, 60.0],
                              [52.0, 25.0, 95.0, 64.0, 81.0, 70.0, 31.0, 60.0, 0.0]]
            candidate = [0, 0, 0, 0, 1, 0, 0, 1, 0]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            capacity = np.array([6000] * self.schNum)
            ind = [0, 7]
            capacity[ind] = 9000

            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            self.pktRate = [610*2] * self.schNum

            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 9:  # Japan network
            latency_matrix = [[0.0, 60.0, 30.0, 47.0, 36.0],
                              [60.0, 0.0, 30.0, 101.0, 37.0],
                              [30.0, 30.0, 0.0, 52.0, 7.0],
                              [47.0, 101.0, 52.0, 0.0, 57.0],
                              [36.0, 37.0, 7.0, 57.0, 0.0]]
            candidate = [1, 0, 0, 0, 1]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            capacity = np.array([6000] * self.schNum)
            ind = [2]
            capacity[ind] = 9000

            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            self.pktRate = [610 * 2] * self.schNum

            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 10:  # South American network
            latency_matrix = [[0.0, 55.0, 61.0, 35.0],
                              [55.0, 0.0, 6.0, 30.0],
                              [61.0, 6.0, 0.0, 34.0],
                              [35.0, 30.0, 34.0, 0.0]]
            candidate = [0, 0, 1, 1]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            capacity = np.array([6000] * self.schNum)
            ind = [1]
            capacity[ind] = 9000

            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            self.pktRate = [610 * 3] * self.schNum

            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 11:  # New Zealand
            latency_matrix = [[0.0, 25.0, 17.0],
                              [25.0, 0.0, 42.0],
                              [17.0, 42.0, 0.0]]
            candidate = [1, 1, 1]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            latency = np.multiply(latency_matrix, 0.5 * 1e-3)
            self.sch2ctlLink = {}
            temp = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[temp] = latency[i]
                    temp += 1

            capacity = np.array([6000] * self.schNum)
            # ind = [0, 1, 4, 7]
            # capacity[ind] = 9000

            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            self.pktRate = [610 * 7] * self.schNum

            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 12:  # Africa
            candidate = [1]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            self.sch2ctlLink = {0: [0.0]}
            self.ctlRate = [9000]
            self.pktRate = [610*7] * self.schNum
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        elif num == 13:  # Europe Sprint Network used in GD evaluation
            candidate = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
            self.sch2ctlLink = {
                0: [0.0, 0.0055, 0.008, 0.009, 0.008, 0.014, 0.011, 0.0155, 0.0185, 0.0185, 0.017, 0.017, 0.0195, 0.019,
                    0.0295],
                1: [0.0195, 0.014, 0.013, 0.0105, 0.0145, 0.0055, 0.01, 0.013, 0.0165, 0.016, 0.0085, 0.0105, 0.0,
                    0.011, 0.0275],
                2: [0.0295, 0.0245, 0.0225, 0.0275, 0.0225, 0.0235, 0.0175, 0.015, 0.0205, 0.019, 0.0265, 0.0285,
                    0.0275, 0.0255, 0.0]}
            #             self.sch2ctlLink = [[0.0,0.0055,0.008,0.009,0.008,0.014,0.011,0.0155,0.0185,0.0185,0.017,0.017,0.0195,0.019,0.0295],
            # [0.0055,0.0,0.003,0.0035,0.0025,0.0085,0.0055,0.009,0.0135,0.0115,0.0115,0.012,0.014,0.014,0.0245],
            # [0.008,0.003,0.0,0.0075,0.002,0.007,0.003,0.0065,0.01,0.0095,0.01,0.012,0.013,0.0105,0.0225],
            # [0.009,0.0035,0.0075,0.0,0.0065,0.005,0.01,0.0125,0.0175,0.016,0.008,0.008,0.0105,0.0175,0.0275],
            # [0.008,0.0025,0.002,0.0065,0.0,0.009,0.005,0.008,0.012,0.011,0.012,0.014,0.0145,0.0125,0.0225],
            # [0.014,0.0085,0.007,0.005,0.009,0.0,0.004,0.0075,0.011,0.0105,0.003,0.005,0.0055,0.012,0.0235],
            # [0.011,0.0055,0.003,0.01,0.005,0.004,0.0,0.0035,0.007,0.0065,0.007,0.009,0.01,0.0075,0.0175],
            # [0.0155,0.009,0.0065,0.0125,0.008,0.0075,0.0035,0.0,0.0035,0.0035,0.0105,0.0125,0.013,0.011,0.015],
            # [0.0185,0.0135,0.01,0.0175,0.012,0.011,0.007,0.0035,0.0,0.0035,0.014,0.016,0.0165,0.0145,0.0205],
            # [0.0185,0.0115,0.0095,0.016,0.011,0.0105,0.0065,0.0035,0.0035,0.0,0.0135,0.0155,0.016,0.014,0.019],
            # [0.017,0.0115,0.01,0.008,0.012,0.003,0.007,0.0105,0.014,0.0135,0.0,0.002,0.0085,0.015,0.0265],
            # [0.017,0.012,0.012,0.008,0.014,0.005,0.009,0.0125,0.016,0.0155,0.002,0.0,0.0105,0.0165,0.0285],
            # [0.0195,0.014,0.013,0.0105,0.0145,0.0055,0.01,0.013,0.0165,0.016,0.0085,0.0105,0.0,0.011,0.0275],
            # [0.019,0.014,0.0105,0.0175,0.0125,0.012,0.0075,0.011,0.0145,0.014,0.015,0.0165,0.011,0.0,0.0255],
            # [0.0295,0.0245,0.0225,0.0275,0.0225,0.0235,0.0175,0.015,0.0205,0.019,0.0265,0.0285,0.0275,0.0255,0.0]]
            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)
            self.ctlRate = [6000, 9000, 12000]
            # self.pktRate = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
            # self.pktRate = [1133, 1133, 1134, 1133, 1133, 1134, 1133, 1133, 1134, 1133, 1133, 1134, 1133, 1133, 1134]
            # self.pktRate = [1266, 1267, 1266, 1267, 1266, 1267, 1266, 1267, 1266, 1267, 1267, 1267, 1267, 1267, 1267]
            # self.pktRate = [1400]*self.schNum
            # self.pktRate = [1533, 1533, 1534, 1533, 1533, 1534, 1533, 1533, 1534, 1533, 1533, 1534, 1533, 1533, 1534]
            self.pktRate = [1666, 1667, 1666, 1667, 1666, 1667, 1666, 1667, 1666, 1667, 1667, 1667, 1667, 1667, 1667]
            # self.pktRate = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]
            # self.pktRate = [1933, 1933, 1934, 1933, 1933, 1934, 1933, 1933, 1934, 1933, 1933, 1934, 1933, 1933, 1934]
            # self.pktRate = [2066, 2067, 2066, 2067, 2066, 2067, 2066, 2067, 2066, 2067, 2067, 2067, 2067, 2067, 2067]
            # self.pktRate = [2200]*self.schNum
            # self.pktRate = [2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2142, 2142]
            # self.pktRate = [2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2215, 2215, 2215, 2215]
            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum
            self.laten = np.zeros((self.ctlNum, self.schNum))
            for key in self.sch2ctlLink:
                self.laten[key] = self.sch2ctlLink[key]
            self.laten[0][0] = 0.1 * np.sort(self.laten[:, 0])[1]
            self.laten[1][12] = 0.1 * np.sort(self.laten[:, 12])[1]
            self.laten[2][14] = 0.1 * np.sort(self.laten[:, 14])[1]

        elif num == 14:  # Asia Sprint Network k-center
            capacity = np.array([6000]*14)
            ind = [0, 1, 4, 7]
            # ind = [0, 1, 2, 3, 4, 6, 7, 13]
            capacity[ind] = 9000
            # capacity = np.array([9000, 9000, 6000, 9000, 9000, 6000, 9000, 9000, 6000, 6000, 6000, 6000, 6000, 9000])
            # capacity = np.array([12000, 12000, 6000, 12000, 12000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000])

            # candidate = np.array([0]*14)
            # # ind = [0, 1, 4, 6, 5, 9, 10, 12]  #ga
            # ind = [0, 6, 3, 13, 9, 12, 10, 5, 8, 2]  # k-center
            # ind = sorted(ind)
            # candidate[ind] = 1
            # self.ctlRate = capacity[ind]

            candidate = [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0]
            self.ctlRate = []
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.ctlRate.append(capacity[i])

            sch2ctlLink = [
                [0.0, 0.035, 0.021, 0.075, 0.048, 0.025, 0.106, 0.074, 0.087, 0.081, 0.04, 0.069, 0.055, 0.052],
                [0.035, 0.0, 0.056, 0.11, 0.078, 0.06, 0.072, 0.041, 0.051, 0.045, 0.005, 0.034, 0.089, 0.025],
                [0.021, 0.056, 0.0, 0.06, 0.03, 0.047, 0.131, 0.096, 0.115, 0.102, 0.061, 0.09, 0.036, 0.074],
                [0.075, 0.11, 0.06, 0.0, 0.03, 0.101, 0.182, 0.151, 0.166, 0.155, 0.115, 0.145, 0.037, 0.127],
                [0.048, 0.078, 0.03, 0.03, 0.0, 0.052, 0.155, 0.121, 0.139, 0.129, 0.088, 0.116, 0.007, 0.1],
                [0.025, 0.06, 0.047, 0.101, 0.052, 0.0, 0.133, 0.045, 0.121, 0.109, 0.066, 0.093, 0.057, 0.078],
                [0.106, 0.072, 0.131, 0.182, 0.155, 0.133, 0.0, 0.044, 0.022, 0.05, 0.076, 0.04, 0.16, 0.095],
                [0.074, 0.041, 0.096, 0.151, 0.121, 0.045, 0.044, 0.0, 0.012, 0.014, 0.045, 0.006, 0.131, 0.064],
                [0.087, 0.051, 0.115, 0.166, 0.139, 0.121, 0.022, 0.012, 0.0, 0.026, 0.063, 0.022, 0.145, 0.081],
                [0.081, 0.045, 0.102, 0.155, 0.129, 0.109, 0.05, 0.014, 0.026, 0.0, 0.049, 0.012, 0.136, 0.07],
                [0.04, 0.005, 0.061, 0.115, 0.088, 0.066, 0.076, 0.045, 0.063, 0.049, 0.0, 0.04, 0.096, 0.031],
                [0.069, 0.034, 0.09, 0.145, 0.116, 0.093, 0.04, 0.006, 0.022, 0.012, 0.04, 0.0, 0.123, 0.06],
                [0.055, 0.089, 0.036, 0.037, 0.007, 0.057, 0.16, 0.131, 0.145, 0.136, 0.096, 0.123, 0.0, 0.107],
                [0.052, 0.025, 0.074, 0.127, 0.1, 0.078, 0.095, 0.064, 0.081, 0.07, 0.031, 0.06, 0.107, 0.0]]

            self.sch2ctlLink = {}
            var = 0
            for i in range(len(candidate)):
                if candidate[i] == 1:
                    self.sch2ctlLink[var] = np.array(sch2ctlLink[i]) * 0.5
                    var += 1

            self.ctlNum = sum(candidate)
            self.schNum = len(candidate)

            # self.pktRate = [1571]*self.schNum
            # self.pktRate = [1857]*self.schNum
            # self.pktRate = [2143]*self.schNum
            # self.pktRate = [2428]*self.schNum
            # self.pktRate = [2714]*self.schNum
            # self.pktRate = [3000] * self.schNum
            self.pktRate = [3286] * self.schNum
            # self.pktRate = [3571]*(self.schNum)
            # self.pktRate = [3857] * self.schNum
            # self.pktRate = [4143] * self.schNum
            # self.pktRate = [4428]*(self.schNum)

            self.noPktbyCtl = [0] * self.ctlNum
            self.avgCtlRespTime = [0.] * self.ctlNum

        else:
            self.ctlNum = 2
            self.schNum = 1
            self.pktRate = [20]  # packet arrival rate for each scheduler
            self.ctlRate = [10, 20]  # controller: number of packets processed by the controller within one second
            # Round Trip Time(RTT) 0.1ms-1ms
            self.sch2ctlLink = {0: [0.01], 1: [1]}

        # self.def_resp_t = self.default_response_time()  # theoretically fastest response time for each controller: each controller is a row vector, and each column represents a switch/scheduler

    def latency_generator(self, intra_laten_range, inter_laten_dev, candidate):
        ctlNum = len(candidate)
        intra_pod_laten = np.random.choice(range(intra_laten_range[0], intra_laten_range[-1]), ctlNum)
        # intra_pod_laten = [round(_ * 1e-6, 6) for _ in intra_pod_laten]

        inter_pod_laten = np.random.choice(range(inter_laten_dev[0], inter_laten_dev[-1]),
                                           ctlNum * (ctlNum - 1) // 2)
        inter_pod_laten = np.ndarray.tolist(inter_pod_laten)
        # inter_pod_laten = [round(_ * 1e-6, 6) for _ in inter_pod_laten]
        loc = -1

        latency_matrix = np.zeros([ctlNum, ctlNum])
        for i in range(ctlNum):
            temp = intra_pod_laten[i]
            for j in range(i + 1, ctlNum):
                loc += 1
                latency_matrix[i][j] = round((temp + inter_pod_laten[loc]) * 1e-6, 6)
        latency_matrix += np.transpose(latency_matrix)
        for i in range(ctlNum):
            latency_matrix[i][i] = round(intra_pod_laten[i] * 1e-6, 6)

        latency_dict = {}
        temp = 0
        for i in range(ctlNum):
            if candidate[i] == 0:
                continue
            else:
                latency_dict[temp] = []
                latency_dict[temp] = np.ndarray.tolist(latency_matrix[i])
                temp += 1
        return latency_dict

    def default_response_time(self):
        proct = [1.0 / x for x in self.ctlRate]
        proct = np.array(proct).reshape((self.ctlNum, 1))
        laten = []
        for i in range(self.ctlNum):
            laten.append([])
            laten[i] = self.sch2ctlLink[i]
        laten = np.multiply(laten, 2)
        respt = np.add(laten, proct)
        return respt

    def update_noPktbyCtl(self, updatelist):
        # updatelist= [Num.Pkt_Processed_by_Ctl0, ... ]
        self.noPktbyCtl = [x + y for x, y in zip(self.noPktbyCtl, updatelist)]

    def update_avgCtlRespTime(self, updatelist):
        self.avgCtlRespTime = [x + y for x, y in zip(self.avgCtlRespTime, updatelist)]
